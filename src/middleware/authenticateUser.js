const jwt = require("jsonwebtoken");
const User = require("../schemas/userSchema"); // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ User –º–æ–¥–µ–ª—å

const extractToken = (req) => req.headers.authorization?.split(" ")[1];

const authenticateUser = async (req, res, next) => {
  const token = extractToken(req);
  if (!token) {
    return res.status(401).json({ message: "Unauthorized: No token provided" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    console.log("üîç Token Decoded:", decoded);

    req.user = decoded;
    return next(); // ‚úÖ –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –¥—ñ—é—á–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–∞–ª—ñ
  } catch (error) {
    console.error("üî• JWT Error:", error);

    // üõ† –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ refreshToken
    if (error.name === "TokenExpiredError") {
      const refreshToken = req.headers["x-refresh-token"]; // –û—Ç—Ä–∏–º—É—î–º–æ refresh —Ç–æ–∫–µ–Ω
      if (!refreshToken) {
        return res
          .status(403)
          .json({ message: "Session expired, please log in again" });
      }

      try {
        const decodedRefresh = jwt.verify(
          refreshToken,
          process.env.JWT_REFRESH_SECRET
        );
        const user = await User.findById(decodedRefresh.id);

        if (!user || user.refreshToken !== refreshToken) {
          return res.status(403).json({ message: "Invalid refresh token" });
        }

        // ‚úÖ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π accessToken
        const newAccessToken = jwt.sign(
          {
            id: user.id,
            username: user.username,
            role: user.role,
            email: user.email,
          },
          process.env.JWT_SECRET,
          { expiresIn: "30d" }
        );
        const refreshToken = jwt.sign(
          { id: user.id },
          process.env.JWT_REFRESH_SECRET,
          { expiresIn: "90d" } // üîπ –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –Ω–∞ 3 –º—ñ—Å—è—Ü—ñ
        );
        req.user = decodedRefresh; // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        res.setHeader("x-access-token", newAccessToken); // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω —É –∑–∞–≥–æ–ª–æ–≤–∫—É
        return next(); // ‚úÖ –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–∞–ø–∏—Ç –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
      } catch (refreshError) {
        return res
          .status(403)
          .json({ message: "Invalid or expired refresh token" });
      }
    }

    return res.status(403).json({ message: "Invalid or expired token" });
  }
};

module.exports = { authenticateUser };
