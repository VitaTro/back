const jwt = require("jsonwebtoken");
const User = require("../schemas/user");

// ‚úÖ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–ª—É—á–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
const extractToken = (req) => req.headers.authorization?.split(" ")[1];

// üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateJWT = (req, res, next) => {
  const token = extractToken(req);
  if (!token) {
    return res.status(401).json({ message: "Unauthorized: No token provided" });
  }

  try {
    req.user = jwt.verify(token, process.env.JWT_SECRET);
    next(); // ‚úÖ –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–∞
  } catch (error) {
    console.error("JWT Error:", error);
    return res.status(403).json({ message: "Invalid or expired token" });
  }
};

// üîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const isAdmin = async (req, res, next) => {
  try {
    if (!req.user) {
      return res.status(403).json({ message: "Access denied: No user found" });
    }

    const user = await User.findById(req.user.id);
    if (!user || user.role !== "admin") {
      return res.status(403).json({ message: "Access denied: Admins only" });
    }

    next(); // ‚úÖ –î–æ–∑–≤–æ–ª—è—î–º–æ –¥–æ—Å—Ç—É–ø
  } catch (error) {
    console.error("Admin Check Error:", error);
    return res
      .status(500)
      .json({ message: "Server error during authentication" });
  }
};

// üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (—á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π)
const isAuthenticated = async (req, res, next) => {
  try {
    if (!req.user) {
      return res.status(401).json({ message: "Unauthorized: No user data" });
    }

    const user = await User.findById(req.user.id).select("-password");
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    req.user = user; // ‚úÖ –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ req
    next();
  } catch (error) {
    console.error("Authentication Error:", error);
    return res.status(401).json({ message: "Invalid or expired token." });
  }
};

module.exports = { authenticateJWT, isAdmin, isAuthenticated };
