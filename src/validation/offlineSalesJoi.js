const Joi = require("joi");

const offlineSaleValidationSchema = Joi.object({
  orderId: Joi.string().required(), // üîπ –û–±–æ–≤ º—è–∑–∫–æ–≤–∏–π –∑–≤ º—è–∑–æ–∫ –∑ OfflineOrder
  products: Joi.array()
    .items(
      Joi.object({
        productId: Joi.string().required(),
        quantity: Joi.number().min(1).required(),
        name: Joi.string().required(),
        price: Joi.number().required(),
        photoUrl: Joi.string().uri().required(),
        color: Joi.string().optional(), // üëï —è–∫—â–æ –¥–æ–¥–∞–Ω–æ ‚Äî –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –∑–∞–∑–Ω–∞—á–∞—î–º–æ
      })
    )
    .required(),
  totalAmount: Joi.number().required(), // üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø—Ä–æ–¥–∞–∂—É
  paymentMethod: Joi.string().valid("BLIK", "bank_transfer").required(),
  status: Joi.string()
    .valid("pending", "completed", "cancelled", "returned")
    .required(),
  refundAmount: Joi.number().min(0).optional(), // üí∏ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω—å
  notes: Joi.string().optional(),
  buyerType: Joi.string().valid("anonim", "przedsiƒôbiorca").optional(),
  buyerName: Joi.when("buyerType", {
    is: "przedsiƒôbiorca",
    then: Joi.string().required(),
    otherwise: Joi.forbidden(),
  }),
  buyerAddress: Joi.when("buyerType", {
    is: "przedsiƒôbiorca",
    then: Joi.string().required(),
    otherwise: Joi.forbidden(),
  }),
  buyerNIP: Joi.when("buyerType", {
    is: "przedsiƒôbiorca",
    then: Joi.string().required(),
    otherwise: Joi.forbidden(),
  }),
  saleDate: Joi.date().optional(), // –¥–ª—è —Ä—É—á–Ω–∏—Ö/—Å—Ç–∞—Ä–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
});

module.exports = offlineSaleValidationSchema;
