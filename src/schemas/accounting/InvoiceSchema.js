const mongoose = require("mongoose");

const InvoiceSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" }, // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
  orderId: { type: mongoose.Schema.Types.ObjectId, required: true },
  paymentId: { type: mongoose.Schema.Types.ObjectId, ref: "Payment" },
  invoiceType: {
    type: String,
    enum: ["online", "offline"],
    required: true,
  },

  totalAmount: { type: Number, required: true },
  paymentMethod: { type: String, required: true },
  issueDate: { type: Date, default: Date.now },
  invoiceNumber: { type: String, required: true, unique: true },

  filePath: { type: String }, // –ª–æ–∫–∞–ª—å–Ω–∏–π —à–ª—è—Ö (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)
  fileUrl: { type: String }, // –ø—É–±–ª—ñ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ PDF

  buyerType: {
    type: String,
    enum: ["company", "individual", "anonim"],
    required: true,
  },
  buyerName: { type: String },
  buyerAddress: { type: String },
  buyerNIP: { type: String },
});

// üß™ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —ñ–Ω–≤–æ–π—Å—É
InvoiceSchema.pre("validate", async function (next) {
  // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞, —è–∫—â–æ –≤—ñ–Ω –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π
  if (!this.invoiceNumber) {
    const now = new Date();
    const month = String(now.getMonth() + 1).padStart(2, "0");
    const year = now.getFullYear();

    const count = await mongoose.model("Invoice").countDocuments({
      issueDate: {
        $gte: new Date(`${year}-${month}-01T00:00:00Z`),
        $lt: new Date(`${year}-${month}-31T23:59:59Z`),
      },
    });

    this.invoiceNumber = `INV-${count + 1}/${month}/${year}`;
  }

  // üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ–º–ø–∞–Ω—ñ—ó
  if (this.buyerType === "company") {
    if (!this.buyerName || !this.buyerAddress || !this.buyerNIP) {
      return next(
        new Error(
          "–î–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ buyerName, buyerAddress —Ç–∞ buyerNIP"
        )
      );
    }
  }

  // üßç‚Äç‚ôÇÔ∏è –§—ñ–∑–æ—Å–æ–±–∞ ‚Äî –Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è, –∞–ª–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
  // anonim ‚Äî –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫

  next();
});

module.exports = mongoose.model("Invoice", InvoiceSchema);
