const mongoose = require("mongoose");

const InvoiceSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User" }, // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –æ—Ñ–ª–∞–π–Ω—É
  orderId: {
    type: mongoose.Schema.Types.ObjectId,
    required: true,
  },
  invoiceType: { type: String, enum: ["online", "offline"], required: true },

  paymentId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Payment",
  },
  totalAmount: { type: Number, required: true },
  paymentMethod: { type: String, required: true },
  issueDate: { type: Date, default: Date.now },
  invoiceNumber: { type: String, required: true, unique: true },
  filePath: { type: String },

  buyerType: {
    type: String,
    enum: ["company", "individual", "anonim"],
    required: true,
  },
  buyerName: { type: String },
  buyerAddress: { type: String },
  buyerNIP: { type: String },
});

// üõ°Ô∏è –ö–∞—Å—Ç–æ–º–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≥—ñ–¥–Ω–æ —Ç–∏–ø—É –ø–æ–∫—É–ø—Ü—è
InvoiceSchema.pre("validate", function (next) {
  if (this.buyerType === "company") {
    if (!this.buyerName || !this.buyerAddress || !this.buyerNIP) {
      return next(
        new Error(
          "–î–ª—è –∫–æ–º–ø–∞–Ω—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ buyerName, buyerAddress —Ç–∞ buyerNIP"
        )
      );
    }
  }

  // –¥–ª—è individual –∞–±–æ anonim ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ
  next();
});

module.exports = mongoose.model("Invoice", InvoiceSchema);
