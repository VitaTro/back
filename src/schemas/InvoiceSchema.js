const mongoose = require("mongoose");

const InvoiceSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
  orderId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Order",
    required: true,
  },
  paymentId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Payment",
    required: true,
  },
  totalAmount: { type: Number, required: true },
  paymentMethod: { type: String, required: true },
  issueDate: { type: Date, default: Date.now },
  invoiceNumber: { type: String, required: true, unique: true },
  filePath: { type: String },

  // üîπ –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–∫—É–ø—Ü—è
  buyerType: { type: String, enum: ["company", "individual"], required: true },
  buyerName: { type: String, required: true },
  buyerAddress: { type: String, required: true },
  buyerNIP: { type: String, required: false }, // –¢—ñ–ª—å–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω—ñ–π
});

// üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ñ–∞–∫—Ç—É—Ä–∏ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
InvoiceSchema.pre("save", async function (next) {
  const currentMonth = new Date().getMonth() + 1;
  const currentYear = new Date().getFullYear();
  const monthString = currentMonth.toString().padStart(2, "0");

  // üìå –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–∫—Ç—É—Ä —É —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ
  const invoiceCount = await mongoose.model("Invoice").countDocuments({
    issueDate: {
      $gte: new Date(`${currentYear}-${monthString}-01T00:00:00Z`),
      $lt: new Date(`${currentYear}-${monthString}-31T23:59:59Z`),
    },
  });

  this.invoiceNumber = `${invoiceCount + 1}/${monthString}/${currentYear}`;
  next();
});

module.exports = mongoose.model("Invoice", InvoiceSchema);
