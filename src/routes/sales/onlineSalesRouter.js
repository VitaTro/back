const express = require("express");
const mongoose = require("mongoose");
const router = express.Router();
const OnlineSale = require("../../schemas/sales/onlineSales");
const OnlineOrder = require("../../schemas/orders/onlineOrders");
const Product = require("../../schemas/product");
const FinanceOverview = require("../../schemas/finance/financeOverview");
const { validate } = require("../../middleware/validateMiddleware");
const validateOnlineSale = require("../../validation/onlineSalesJoi");
const { authenticateAdmin } = require("../../middleware/authenticateAdmin");
const Invoice = require("../../schemas/accounting/InvoiceSchema");
const StockMovement = require("../../schemas/accounting/stockMovement");
const { calculateStock } = require("../../services/calculateStock");
const generateUniversalInvoice = require("../../services/generateUniversalInvoice");

// üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂—ñ
router.get("/", authenticateAdmin, async (req, res) => {
  try {
    const onlineSales = await OnlineSale.find()
      .populate({
        path: "products.productId",
        select: "name photoUrl",
      })
      .populate("processedBy");

    if (!onlineSales.length) {
      return res.status(404).json({ error: "No online sales available" });
    }
    console.log("‚úÖ Online sales fetched:", onlineSales);
    res.status(200).json(onlineSales);
  } catch (error) {
    console.error("üî• Error in fetching online sales:", error);
    res.status(500).json({ error: "Failed to fetch online sales" });
  }
});

router.post("/", authenticateAdmin, async (req, res) => {
  try {
    const { onlineOrderId } = req.body;
    const order = await OnlineOrder.findById(onlineOrderId);

    if (!order) {
      return res.status(404).json({ error: "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (order.status !== "completed") {
      return res.status(400).json({ error: "üö´ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" });
    }

    const enrichedProducts = [];
    let totalAmount = 0;

    for (const item of order.products) {
      const lastMovement = await StockMovement.findOne({
        productId: item.productId,
        type: { $in: ["sale", "purchase"] },
      }).sort({ date: -1 });

      if (
        !lastMovement ||
        !lastMovement.productIndex ||
        !lastMovement.productName
      ) {
        throw new Error(`üß® –ù–µ–º–∞—î —Ä—É—Ö—É —Ç–æ–≤–∞—Ä—É: ${item.productId}`);
      }

      const stockLevel = await calculateStock(lastMovement.productIndex);
      if (stockLevel < item.quantity) {
        return res.status(400).json({
          error: `üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞ —Å–∫–ª–∞–¥—ñ: ${lastMovement.productName}`,
        });
      }

      const productData = await Product.findById(item.productId);
      const unitPrice =
        lastMovement.unitSalePrice ||
        productData?.lastRetailPrice ||
        lastMovement.price ||
        lastMovement.unitPurchasePrice ||
        0;
      totalAmount += unitPrice * item.quantity;

      enrichedProducts.push({
        productId: item.productId,
        index: lastMovement.productIndex,
        name: lastMovement.productName,
        quantity: item.quantity,
        salePrice: unitPrice,
        photoUrl: item.photoUrl || "",
      });

      // üéØ –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫–ª–∞–¥—Å—å–∫–∏–π —Ä—É—Ö
      await StockMovement.create({
        productId: item.productId,
        productIndex: lastMovement.productIndex,
        productName: lastMovement.productName,
        quantity: item.quantity,
        type: "sale",
        unitSalePrice: unitPrice,
        price: unitPrice,
        relatedSaleId: onlineOrderId,
        saleSource: "OnlineSale",
        date: new Date(),
        note: "–°–ø–∏—Å–∞–Ω–Ω—è –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂—É",
      });

      // üì¶ –û–Ω–æ–≤–ª—é—î–º–æ Product
      const productDoc = await Product.findById(item.productId);
      if (productDoc) {
        const newStock = await calculateStock(lastMovement.productIndex);
        productDoc.quantity = newStock;
        productDoc.currentStock = newStock;
        productDoc.inStock = newStock > 0;
        await productDoc.save();
      }
    }

    // üßæ –°—Ç–≤–æ—Ä—é—î–º–æ OnlineSale
    const onlineSale = await OnlineSale.create({
      onlineOrderId,
      userId: order.userId,
      products: enrichedProducts,
      totalAmount,
      paymentMethod: order.paymentMethod,
      status: "completed",
      deliveryDetails: `${order.deliveryType}`,
      saleDate: saleDate || new Date(),
      buyerType: order.buyerType,
      buyerName: order.buyerName,
      buyerAddress: order.buyerAddress,
      buyerNIP: order.buyerNIP,
    });

    // üí∞ –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–∏
    await FinanceOverview.updateOne(
      {},
      {
        $inc: { totalRevenue: totalAmount },
        $push: { completedOnlineSales: onlineSale._id },
      },
      { upsert: true }
    );

    // üìÑ –ì–µ–Ω–µ—Ä—É—î–º–æ —Ñ–∞–∫—Ç—É—Ä—É
    // const invoice = new Invoice({
    //   orderId: onlineOrderId,
    //   invoiceType: "online",
    //   totalAmount,
    //   paymentMethod: order.paymentMethod,
    //   buyerType: order.buyerType,
    //   buyerName: order.buyerName,
    //   buyerAddress: order.buyerAddress,
    //   buyerNIP: order.buyerNIP,
    // });

    // await invoice.save();
    const invoice = await generateUniversalInvoice(order, {
      mode: "online",
      buyerType: order.buyerType,
      buyerName: order.buyerName,
      buyerAddress: order.buyerAddress,
      buyerNIP: order.buyerNIP,
    });
    return res.status(201).json({
      message: "‚úÖ –û–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
      sale: onlineSale,
      invoice: invoice,
    });
  } catch (error) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂—É:", error);
    res.status(500).json({
      error: error.message || "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂",
    });
  }
});

// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ–Ω–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è + –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É –ø—Ä–æ–¥–∞–∂—ñ
router.patch("/:id", authenticateAdmin, async (req, res) => {
  try {
    console.log(
      `üõ† Updating online order ID: ${req.params.id} with status: ${req.body.status}`
    );

    const { status, processedBy, paymentMethod } = req.body;
    const validStatuses = ["new", "completed", "cancelled", "returned"];

    if (!validStatuses.includes(status)) {
      console.warn(`‚ö†Ô∏è Invalid status received: ${status}`);
      return res.status(400).json({ error: "Invalid status" });
    }

    const existingOnlineOrder = await OnlineOrder.findById(req.params.id);
    if (!existingOnlineOrder) {
      console.warn(`‚ö†Ô∏è Online order not found for ID: ${req.params.id}`);
      return res.status(404).json({ error: "Online order not found" });
    }

    if (existingOnlineOrder.status === status) {
      console.warn(`‚ö†Ô∏è Status is already '${status}', no update needed.`);
      return res
        .status(400)
        .json({ error: "Online order already has this status" });
    }

    // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    existingOnlineOrder.status = status;
    await existingOnlineOrder.save();
    console.log("‚úÖ Online order status updated successfully!");

    // üìå –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å `"completed"`, –¥–æ–¥–∞—î–º–æ –¥–æ `OnlineSales`
    if (status === "completed") {
      console.log("üìä Checking if online order is already in OnlineSales...");
      const saleExists = await OnlineSale.findOne({
        onlineOrderId: existingOnlineOrder._id,
      });

      if (!saleExists) {
        console.log("üì¶ Adding online order to OnlineSales...");

        // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–¥–∞—î–º–æ `processedBy` —É —Ñ–æ—Ä–º–∞—Ç—ñ ObjectId
        const saleProcessedBy = mongoose.Types.ObjectId.isValid(processedBy)
          ? processedBy
          : null;

        // ‚úÖ `paymentMethod` –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        const salePaymentMethod = paymentMethod || "BLIK";

        // ‚úÖ `salePrice` –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        const saleProducts = existingOnlineOrder.products.map((product) => ({
          productId: product.productId,
          quantity: product.quantity,
          salePrice: product.salePrice || product.price || 0,
        }));

        const newOnlineSale = new OnlineSale({
          userId: existingOnlineOrder.userId,
          onlineOrderId: existingOnlineOrder._id,
          totalAmount: existingOnlineOrder.totalPrice,
          paymentMethod: salePaymentMethod,
          processedBy: saleProcessedBy, // üîπ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ ObjectId –∞–±–æ null
          products: saleProducts,
          status: "completed",
          saleDate: new Date(),
        });

        await newOnlineSale.save();
        console.log("‚úÖ Online sale saved successfully!");
      } else {
        console.log("‚ö†Ô∏è Online order is already in OnlineSales, skipping...");
      }
    }
    await FinanceOverview.updateOne(
      {},
      {
        $push: { completedOnlineOrders: existingOnlineOrder._id },
        $inc: { totalRevenue: existingOnlineOrder.totalPrice },
      },
      { upsert: true }
    );

    res.status(200).json({
      message: "Online order updated successfully",
      onlineOrder: existingOnlineOrder,
    });
  } catch (error) {
    console.error("üî• Error updating online order:", error);
    res.status(500).json({ error: "Failed to update online order" });
  }
});

router.put("/:id/return", authenticateAdmin, async (req, res) => {
  try {
    const { returnedProducts, refundAmount } = req.body;
    const sale = await OnlineSale.findById(req.params.id);
    if (!sale) return res.status(404).json({ error: "‚ùå –ü—Ä–æ–¥–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    if (sale.status === "returned")
      return res
        .status(400)
        .json({ error: "‚ö†Ô∏è –ü—Ä–æ–¥–∞–∂ –≤–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –ø–æ–≤–Ω—ñ—Å—Ç—é" });

    let totalRefunded = 0;

    for (const product of sale.products) {
      const returnedItem = returnedProducts.find(
        (p) => p.productId === product.productId.toString()
      );

      if (returnedItem) {
        if (returnedItem.quantity > product.quantity) {
          return res.status(400).json({
            error: `‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ø–µ—Ä–µ–≤–∏—â—É—î –∫—É–ø–ª–µ–Ω—É`,
          });
        }

        // üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—É—Ö –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ —Å–∫–ª–∞–¥
        await StockMovement.create({
          productId: product.productId,
          productIndex: product.index,
          productName: product.name,
          quantity: returnedItem.quantity,
          type: "return",
          unitPurchasePrice: product.price,
          price: product.price,
          relatedSaleId: sale._id,
          saleSource: "OnlineSale",
          date: new Date(),
          note: "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂—É",
        });

        // üí∞ –û–±–ª—ñ–∫ —Å—É–º–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        totalRefunded += returnedItem.quantity * product.price;
        product.quantity -= returnedItem.quantity;
      }
    }

    await FinanceOverview.updateOne(
      {},
      { $inc: { totalRevenue: -totalRefunded } }
    );

    sale.products = sale.products.filter((p) => p.quantity > 0);
    sale.returnedItems = returnedProducts;
    if (sale.products.length === 0) {
      sale.status = "returned";
    }

    await sale.save();

    res.status(200).json({ message: "‚úÖ –¢–æ–≤–∞—Ä –ø–æ–≤–µ—Ä–Ω—É—Ç–æ", sale });
  } catch (error) {
    console.error("üî• Error during return:", error);
    res.status(500).json({ error: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è" });
  }
});

// router.get("/invoices", authenticateAdmin, async (req, res) => {
//   try {
//     const invoices = await Invoice.find()
//       .sort({ issueDate: -1 })
//       .populate("userId", "fullName email") // —è–∫—â–æ —Ö–æ—á–µ—à –±–∞—á–∏—Ç–∏ —é–∑–µ—Ä–∞
//       .populate("orderId", "products totalPrice"); // —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è

//     res.status(200).json(invoices);
//   } catch (error) {
//     console.error("‚ùå Failed to fetch invoices:", error);
//     res.status(500).json({ error: "Failed to fetch invoices" });
//   }
// });

module.exports = router;
