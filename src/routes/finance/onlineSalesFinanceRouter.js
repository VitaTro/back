const express = require("express");
const router = express.Router();
const OnlineSale = require("../../schemas/finance/onlineSales");
const OnlineOrder = require("../../schemas/finance/onlineOrders");
const Product = require("../../schemas/product");
const FinanceOverview = require("../../schemas/finance/financeOverview");
const { validate } = require("../../middleware/validateMiddleware");
const validateOnlineSale = require("../../validation/onlineSalesJoi");

// üîç –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –æ–Ω–ª–∞–π–Ω –ø—Ä–æ–¥–∞–∂—ñ
router.get("/", async (req, res) => {
  try {
    console.log("üîç Fetching online sales...");
    const onlineSales = await OnlineSale.find()
      .populate({
        path: "products.productId",
        select: "name photoUrl",
      })
      .populate("processedBy");

    console.log("‚úÖ Online sales fetched:", onlineSales);
    res.status(200).json(onlineSales);
  } catch (error) {
    console.error("üî• Error in fetching online sales:", error);
    res.status(500).json({ error: "Failed to fetch online sales" });
  }
});

router.post("/", validate(validateOnlineSale), async (req, res) => {
  try {
    console.log("‚û°Ô∏è –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂...");

    const { products, totalAmount, paymentMethod, status } = req.body;
    const onlineSaleProducts = [];

    for (const product of products) {
      const dbProduct = await Product.findById(product.productId);
      if (!dbProduct || dbProduct.stock < product.quantity) {
        return res.status(400).json({
          error: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É: ${
            dbProduct?.name || product.productId
          }`,
        });
      }
      dbProduct.stock -= product.quantity;
      await dbProduct.save();

      onlineSaleProducts.push({
        productId: dbProduct._id,
        quantity: product.quantity,
        salePrice: product.salePrice || dbProduct.price || 0,
      });
    }

    const newOnlineSale = new OnlineSale({
      products: onlineSaleProducts,
      totalAmount,
      paymentMethod,
      status: status || "received",
      saleDate: new Date(),
    });

    await newOnlineSale.save();
    console.log("‚úÖ –û–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");

    res.status(201).json({
      message: "–ü—Ä–æ–¥–∞–∂ –∑–∞–ø–∏—Å–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ",
      sale: newOnlineSale,
    });
  } catch (error) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂—É:", error);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂" });
  }
});

// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ–Ω–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è + –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —É –ø—Ä–æ–¥–∞–∂—ñ
router.patch("/:id", async (req, res) => {
  try {
    console.log(
      `üõ† Updating online order ID: ${req.params.id} with status: ${req.body.status}`
    );

    const { status, processedBy, paymentMethod } = req.body;
    const validStatuses = ["new", "completed", "cancelled", "returned"];

    if (!validStatuses.includes(status)) {
      console.warn(`‚ö†Ô∏è Invalid status received: ${status}`);
      return res.status(400).json({ error: "Invalid status" });
    }

    const existingOnlineOrder = await OnlineOrder.findById(req.params.id);
    if (!existingOnlineOrder) {
      console.warn(`‚ö†Ô∏è Online order not found for ID: ${req.params.id}`);
      return res.status(404).json({ error: "Online order not found" });
    }

    if (existingOnlineOrder.status === status) {
      console.warn(`‚ö†Ô∏è Status is already '${status}', no update needed.`);
      return res
        .status(400)
        .json({ error: "Online order already has this status" });
    }

    // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    existingOnlineOrder.status = status;
    await existingOnlineOrder.save();
    console.log("‚úÖ Online order status updated successfully!");

    // üìå –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å `"completed"`, –¥–æ–¥–∞—î–º–æ –¥–æ `OnlineSales`
    if (status === "completed") {
      console.log("üìä Checking if online order is already in OnlineSales...");
      const saleExists = await OnlineSale.findOne({
        onlineOrderId: existingOnlineOrder._id,
      });

      if (!saleExists) {
        console.log("üì¶ Adding online order to OnlineSales...");

        // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–¥–∞—î–º–æ `processedBy` —É —Ñ–æ—Ä–º–∞—Ç—ñ ObjectId
        const saleProcessedBy = mongoose.Types.ObjectId.isValid(processedBy)
          ? processedBy
          : null;

        // ‚úÖ `paymentMethod` –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        const salePaymentMethod = paymentMethod || "card";

        // ‚úÖ `salePrice` –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        const saleProducts = existingOnlineOrder.products.map((product) => ({
          productId: product.productId,
          quantity: product.quantity,
          salePrice: product.salePrice || product.price || 0,
        }));

        const newOnlineSale = new OnlineSale({
          onlineOrderId: existingOnlineOrder._id,
          totalAmount: existingOnlineOrder.totalPrice,
          paymentMethod: salePaymentMethod,
          processedBy: saleProcessedBy, // üîπ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ ObjectId –∞–±–æ null
          products: saleProducts,
          status: "completed",
          saleDate: new Date(),
        });

        await newOnlineSale.save();
        console.log("‚úÖ Online sale saved successfully!");
      } else {
        console.log("‚ö†Ô∏è Online order is already in OnlineSales, skipping...");
      }
    }
    console.log("üîç Adding online order ID to FinanceOverview...");
    await FinanceOverview.updateOne(
      {},
      {
        $push: { completedOnlineOrders: existingOnlineOrder._id },
        $inc: { totalRevenue: existingOnlineOrder.totalPrice },
      },
      { upsert: true }
    );

    res.status(200).json({
      message: "Online order updated successfully",
      onlineOrder: existingOnlineOrder,
    });
  } catch (error) {
    console.error("üî• Error updating online order:", error);
    res.status(500).json({ error: "Failed to update online order" });
  }
});

router.put("/:id/return", async (req, res) => {
  try {
    const { returnedProducts, refundAmount } = req.body;
    const sale = await OnlineSale.findById(req.params.id);

    if (!sale) return res.status(404).json({ error: "‚ùå –ü—Ä–æ–¥–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    if (sale.status === "returned")
      return res
        .status(400)
        .json({ error: "‚ö†Ô∏è –ü—Ä–æ–¥–∞–∂ –≤–∂–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –ø–æ–≤–Ω—ñ—Å—Ç—é" });

    let totalRefunded = 0;

    for (const product of sale.products) {
      const returnedItem = returnedProducts.find(
        (p) => p.productId === product.productId.toString()
      );

      if (returnedItem) {
        if (returnedItem.quantity > product.quantity) {
          return res.status(400).json({
            error: `‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –ø–µ—Ä–µ–≤–∏—â—É—î –∫—É–ø–ª–µ–Ω—É!`,
          });
        }

        // üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å–∫–ª–∞–¥
        await Product.updateOne(
          { _id: product.productId },
          { $inc: { stock: returnedItem.quantity } }
        );

        // üí∞ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        totalRefunded += returnedItem.quantity * product.salePrice;
        product.quantity -= returnedItem.quantity;
      }
    }

    // üíµ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤
    await FinanceOverview.updateOne(
      {},
      { $inc: { totalRevenue: -totalRefunded } }
    );

    // üìå –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–æ–≤–µ—Ä–Ω—É–ª–∏
    sale.products = sale.products.filter((p) => p.quantity > 0);
    sale.returnedItems = returnedProducts;

    if (sale.products.length === 0) {
      sale.status = "returned"; // –Ø–∫—â–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω—ñ, –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å
    }

    await sale.save();

    res.status(200).json({ message: "‚úÖ –¢–æ–≤–∞—Ä —á–∞—Å—Ç–∫–æ–≤–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–æ", sale });
  } catch (error) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:", error);
    res.status(500).json({ error: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä" });
  }
});

module.exports = router;
