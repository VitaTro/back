const express = require("express");
const mongoose = require("mongoose");
const router = express.Router();
const OnlineOrder = require("../../schemas/finance/onlineOrders");
const { validate } = require("../../middleware/validateMiddleware");
const onlineOrderValidationSchema = require("../../validation/onlineOrdersJoi");
const Product = require("../../schemas/product");
const OnlineSale = require("../../schemas/finance/onlineSales");
const FinanceOverview = require("../../schemas/finance/financeOverview");

router.get("/", async (req, res) => {
  try {
    console.log("üîç Fetching online orders...");

    // –§—ñ–ª—å—Ç—Ä –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    const filter = req.query.status
      ? { status: req.query.status }
      : { status: { $ne: "archived" } };

    // –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ?page=1&limit=10)
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º
    const onlineOrders = await OnlineOrder.find(filter)
      .populate({
        path: "products.productId",
        select: "name photoUrl",
      })
      .populate("userId", "email name")
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    console.log("‚úÖ onlineOrders fetched:", onlineOrders);
    if (!onlineOrders || onlineOrders.length === 0) {
      console.warn("‚ö†Ô∏è No online orders found.");
      return res.status(404).json({ error: "No online orders available" });
    }
    res.status(200).json({ onlineOrders, page, limit });
  } catch (error) {
    console.error("üî• Error in fetching online orders:", error);
    res.status(500).json({ error: "Failed to fetch online orders" });
  }
});

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –æ–Ω–ª–∞–π–Ω –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.post("/", async (req, res) => {
  console.log("üöÄ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!");
  console.log("üì¶ –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", req.body);
  console.log("üìç `deliveryType` –ø–µ—Ä–µ–¥–∞–Ω–æ —è–∫:", req.body.deliveryType);

  try {
    const {
      userId,
      products,
      totalPrice,
      paymentMethod,
      deliveryType,
      deliveryAddress,
    } = req.body;

    if (!userId || !products || products.length === 0) {
      console.warn("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: `userId` –∞–±–æ `products` –ø–æ—Ä–æ–∂–Ω—ñ!");
      return res.status(400).json({ error: "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
    }

    // ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ `"courier"` –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ `deliveryType` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π
    const finalDeliveryType = deliveryType || "courier";

    const newOrder = new OnlineOrder({
      userId,
      products,
      totalPrice,
      paymentStatus: "unpaid",
      paymentMethod,
      deliveryType: finalDeliveryType,
      deliveryAddress,
      status: "new",
    });

    await newOrder.save();
    console.log("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!", newOrder);

    res
      .status(201)
      .json({ message: "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!", onlineOrder: newOrder });
  } catch (error) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error.message);
    res.status(500).json({
      error: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
      errorMessage: error.message,
    });
  }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –æ–Ω–ª–∞–π–Ω –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.get("/:id", async (req, res) => {
  try {
    console.log(`üîé Fetching online order with ID: ${req.params.id}`);

    const onlineOrder = await OnlineOrder.findById(req.params.id)
      .populate("products.productId", "name photoUrl")
      .populate("userId", "email name");

    if (!onlineOrder) {
      console.warn(`‚ö†Ô∏è Online order not found for ID: ${req.params.id}`);
      return res.status(404).json({ error: "Online order not found" });
    }

    console.log("‚úÖ Online order fetched:", onlineOrder);
    res.status(200).json(onlineOrder);
  } catch (error) {
    console.error("üî• Error in fetching online order:", error);
    res.status(500).json({ error: "Failed to fetch online order" });
  }
});

// –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞—Ç–∏ —É `OnlineSales`

router.patch("/:id", async (req, res) => {
  console.log("üöÄ –û—Ç—Ä–∏–º–∞–Ω–æ PATCH-–∑–∞–ø–∏—Ç –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!");
  console.log(`üõ† –ó–∞–ø–∏—Ç –Ω–∞ ID: ${req.params.id}, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:`, req.body);

  try {
    const { status, userId, deliveryType, deliveryAddress } = req.body;

    // üîç –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –±–∞–∑—ñ, —â–æ–± `existingOrder` —Ç–æ—á–Ω–æ –±—É–≤ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π
    const existingOrder = await OnlineOrder.findById(req.params.id);

    // ‚úÖ –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—î –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
    if (!existingOrder) {
      console.warn(`‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ID: ${req.params.id}`);
      return res.status(404).json({ error: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    console.log("üîÑ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:", existingOrder.status);
    console.log("üì¶ –ü–æ—Ç–æ—á–Ω–∏–π `deliveryType`:", existingOrder.deliveryType);
    console.log("üë§ –ü–æ—Ç–æ—á–Ω–∏–π `userId`:", existingOrder.userId);

    // ‚úÖ –Ø–∫—â–æ `userId` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ObjectId)
    if (!existingOrder.userId) {
      console.warn("‚ùå `userId` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ.");
      existingOrder.userId = new mongoose.Types.ObjectId(
        "6567c542e92d2b3f6f1b29d8"
      ); // üîπ –¢–∏–º—á–∞—Å–æ–≤–∏–π ID
    }

    // ‚úÖ –Ø–∫—â–æ `deliveryType` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ `"courier"`
    if (!existingOrder.deliveryType) {
      console.warn("‚ùå `deliveryType` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ `courier`.");
      existingOrder.deliveryType = "courier";
    }

    // ‚úÖ –Ø–∫—â–æ `deliveryAddress` –ø–æ—Ä–æ–∂–Ω—î, —Å—Ç–∞–≤–∏–º–æ —Ç–µ—Å—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É
    if (
      !existingOrder.deliveryAddress &&
      existingOrder.deliveryType === "courier"
    ) {
      console.warn(
        "‚ùå `deliveryAddress` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –∞–¥—Ä–µ—Å—É."
      );
      existingOrder.deliveryAddress = "–¢–µ—Å—Ç–æ–≤–∞ –∞–¥—Ä–µ—Å–∞, 123, –ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞";
    }

    existingOrder.status = status || existingOrder.status;
    await existingOrder.save();

    console.log("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!");

    res.status(200).json({
      message: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!",
      onlineOrder: existingOrder,
    });
  } catch (error) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error.message);
    res
      .status(500)
      .json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", errorMessage: error.message });
  }
});

router.put("/:id", async (req, res) => {
  try {
    console.log(`üõ† Updating online order ID: ${req.params.id}...`);
    const updatedOrderData = req.body;

    const onlineOrder = await OnlineOrder.findById(req.params.id);
    if (!onlineOrder) {
      return res.status(404).json({ error: "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // ‚úÖ –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω
    if (updatedOrderData.status && updatedOrderData.updatedBy) {
      onlineOrder.statusHistory.push({
        status: updatedOrderData.status,
        updatedBy: updatedOrderData.updatedBy,
      });
    }

    Object.assign(onlineOrder, updatedOrderData);
    await onlineOrder.save();

    console.log("‚úÖ Online order updated successfully!");
    res.status(200).json({ message: "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!", onlineOrder });
  } catch (error) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ error: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});

router.put("/:id/return", async (req, res) => {
  console.log("üîÑ –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:", req.body);

  try {
    console.log(`üîÑ Returning items for order ID: ${req.params.id}...`);
    const { returnedProducts, refundAmount, updatedBy } = req.body;

    if (!returnedProducts || returnedProducts.length === 0) {
      console.warn("‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è!");
      return res
        .status(400)
        .json({ error: "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è" });
    }

    const onlineOrder = await OnlineOrder.findById(req.params.id);
    if (!onlineOrder) {
      console.warn(`‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ ID: ${req.params.id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!`);
      return res.status(404).json({ error: "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    console.log("üì¶ –ü–æ—Ç–æ—á–Ω–∏–π `deliveryType`:", onlineOrder.deliveryType);
    console.log("üí≥ –ü–æ—Ç–æ—á–Ω–∏–π `paymentMethod`:", onlineOrder.paymentMethod);
    console.log("üë§ –ü–æ—Ç–æ—á–Ω–∏–π `userId`:", onlineOrder.userId);

    // ‚úÖ –î–æ–¥–∞—î–º–æ `deliveryType`, `paymentMethod` —Ç–∞ `userId`, —è–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ
    if (!onlineOrder.deliveryType) {
      console.warn("‚ùå `deliveryType` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ `courier`.");
      onlineOrder.deliveryType = "courier";
    }
    if (!onlineOrder.paymentMethod) {
      console.warn("‚ùå `paymentMethod` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ `card`.");
      onlineOrder.paymentMethod = "card";
    }
    if (!onlineOrder.userId) {
      console.warn(
        "‚ùå `userId` –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
      );
      onlineOrder.userId = new mongoose.Types.ObjectId(
        "6567c542e92d2b3f6f1b29d8"
      );
    }

    // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∑–∞–º—ñ–Ω—é—î–º–æ `"returned"` –Ω–∞ `"cancelled"`)
    onlineOrder.status = "cancelled";
    onlineOrder.statusHistory.push({
      status: "cancelled",
      updatedBy: updatedBy,
    });

    await onlineOrder.save();

    console.log("‚úÖ Items returned successfully!");
    res.status(200).json({ message: "‚úÖ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!", onlineOrder });
  } catch (error) {
    console.error("üî• Error processing return:", error.message);
    res.status(500).json({
      error: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è",
      errorMessage: error.message,
    });
  }
});

router.patch("/:id/status", async (req, res) => {
  try {
    const { status, updatedBy } = req.body;

    // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å—Ç–∞—Ç—É—Å –¥–æ–ø—É—Å—Ç–∏–º–∏–π
    const validStatuses = [
      "new",
      "received",
      "assembled",
      "shipped",
      "completed",
      "cancelled",
    ];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å" });
    }

    const order = await OnlineOrder.findById(req.params.id);
    if (!order)
      return res.status(404).json({ error: "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    // ‚úÖ –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω—É —É `statusHistory`
    order.statusHistory.push({
      status,
      updatedBy,
      updatedAt: new Date(),
    });

    // ‚úÖ –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å `"cancelled"` —ñ –ø–ª–∞—Ç—ñ–∂ –Ω–µ –ø—Ä–æ–π—à–æ–≤, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if (status === "cancelled" && order.paymentStatus === "unpaid") {
      order.status = "cancelled";
    } else {
      order.status = status;
    }

    await order.save();

    // üîπ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —á–µ—Ä–µ–∑ Socket.io
    io.emit("orderStatusUpdated", {
      orderId: order._id,
      newStatus: order.status,
    });

    res.status(200).json({ message: "‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ", order });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:", error);
    res.status(500).json({ error: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å" });
  }
});

module.exports = router;
