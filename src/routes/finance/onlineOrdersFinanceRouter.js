const express = require("express");
const router = express.Router();
const OnlineOrder = require("../../schemas/finance/onlineOrders");
const OnlineSale = require("../../schemas/finance/onlineSales");
const FinanceOverview = require("../../schemas/finance/financeOverview");
const { authenticateAdmin } = require("../../middleware/authenticateAdmin");

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –æ–Ω–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é —ñ —Ñ—ñ–ª—å—Ç—Ä–æ–º
router.get("/", authenticateAdmin, async (req, res) => {
  try {
    const filter = req.query.status
      ? { status: req.query.status }
      : { status: { $ne: "archived" } };

    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const onlineOrders = await OnlineOrder.find(filter)
      .populate("products.productId", "name photoUrl")
      .populate("userId", "email name")
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    res.status(200).json({ onlineOrders, page, limit });
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch online orders" });
  }
});

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.get("/:id", authenticateAdmin, async (req, res) => {
  try {
    const onlineOrder = await OnlineOrder.findById(req.params.id)
      .populate("products.productId", "name photoUrl")
      .populate("userId", "email name");

    if (!onlineOrder) {
      return res.status(404).json({ error: "Online order not found" });
    }

    res.status(200).json(onlineOrder);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch online order" });
  }
});

// ‚úÖ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.post("/", authenticateAdmin, async (req, res) => {
  try {
    const {
      userId,
      products,
      totalPrice,
      paymentMethod,
      deliveryType,
      deliveryAddress,
    } = req.body;

    if (!userId || !products || products.length === 0) {
      return res.status(400).json({ error: "Invalid order data" });
    }

    const newOrder = new OnlineOrder({
      userId,
      products,
      totalPrice,
      paymentStatus: "unpaid",
      paymentMethod,
      deliveryType: deliveryType || "courier",
      deliveryAddress,
      status: "new",
    });

    await newOrder.save();
    res
      .status(201)
      .json({ message: "Order created successfully!", onlineOrder: newOrder });
  } catch (error) {
    res.status(500).json({ error: "Failed to create order" });
  }
});

// ‚úÖ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.patch("/:id/status", authenticateAdmin, async (req, res) => {
  try {
    const { status, updatedBy } = req.body;
    const validStatuses = [
      "new",
      "received",
      "assembled",
      "shipped",
      "completed",
      "cancelled",
    ];

    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: "Invalid status" });
    }

    const order = await OnlineOrder.findById(req.params.id);
    if (!order) return res.status(404).json({ error: "Order not found" });

    order.statusHistory.push({ status, updatedBy, updatedAt: new Date() });
    order.status = status;

    await order.save();
    res.status(200).json({ message: "Order status updated", order });
  } catch (error) {
    res.status(500).json({ error: "Failed to update order status" });
  }
});

// ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –ø—Ä–æ–¥–∞–∂
router.put("/:id/sale", authenticateAdmin, async (req, res) => {
  try {
    console.log(`üîÑ Converting order ID: ${req.params.id} to sale...`);

    const order = await OnlineOrder.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ error: "Order not found" });
    }

    if (order.status !== "completed") {
      return res
        .status(400)
        .json({ error: "Order must be completed before converting to sale" });
    }

    // ‚úÖ –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–¥–∞–∂ —É `OnlineSale`
    const newSale = await OnlineSale.create({
      orderId: order._id,
      totalAmount: order.totalPrice,
      paymentMethod: order.paymentMethod,
      saleDate: new Date(),
    });

    console.log("‚úÖ Sale recorded:", newSale);

    // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –æ–≥–ª—è–¥
    await FinanceOverview.updateOne(
      {},
      { $inc: { totalRevenue: order.totalPrice } }
    );

    console.log("üí∞ FinanceOverview updated!");

    // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ `"sold"`
    order.status = "sold";
    await order.save();

    console.log("‚úÖ Order status updated to 'sold'");
    for (const item of order.products) {
      await Product.findByIdAndUpdate(item.productId, {
        $inc: { stock: -item.quantity },
      });
    }
    console.log("‚úÖ Product stock updated!");

    res
      .status(200)
      .json({ message: "Sale processed successfully!", sale: newSale });
  } catch (error) {
    console.error("üî• Error processing sale:", error);
    res.status(500).json({ error: "Failed to process sale" });
  }
});

// ‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
router.put("/:id/return", authenticateAdmin, async (req, res) => {
  try {
    const { returnedProducts, refundAmount, updatedBy } = req.body;
    if (!returnedProducts || returnedProducts.length === 0) {
      return res.status(400).json({ error: "No returned products specified" });
    }

    const onlineOrder = await OnlineOrder.findById(req.params.id);
    if (!onlineOrder) {
      return res.status(404).json({ error: "Order not found" });
    }

    onlineOrder.status = "cancelled";
    onlineOrder.statusHistory.push({ status: "cancelled", updatedBy });
    await onlineOrder.save();

    res
      .status(200)
      .json({ message: "Return processed successfully", onlineOrder });
  } catch (error) {
    res.status(500).json({ error: "Failed to process return" });
  }
});

router.patch("/:id", authenticateAdmin, async (req, res) => {
  console.log("üöÄ –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", req.params.id);

  try {
    const { status, updatedBy, deliveryType, deliveryAddress } = req.body;
    const validStatuses = [
      "new",
      "received",
      "assembled",
      "shipped",
      "completed",
      "cancelled",
    ];

    const order = await OnlineOrder.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ error: "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (status && !validStatuses.includes(status)) {
      return res.status(400).json({ error: "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å" });
    }

    // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–∞ –∑–∞–ø–∏—Å—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω
    if (status) {
      order.status = status;
      order.statusHistory.push({ status, updatedBy, updatedAt: new Date() });
    }

    if (deliveryType) order.deliveryType = deliveryType;
    if (deliveryAddress) order.deliveryAddress = deliveryAddress;

    await order.save();
    console.log("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ:", order);

    res.status(200).json({ message: "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", order });
  } catch (error) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ error: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});

router.put("/:id", authenticateAdmin, async (req, res) => {
  console.log("üõ†Ô∏è –ü–æ–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", req.params.id);

  try {
    const updatedOrderData = req.body;

    const order = await OnlineOrder.findById(req.params.id);
    if (!order) {
      return res.status(404).json({ error: "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    // ‚úÖ –î–æ–¥–∞—î–º–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –¥–æ `statusHistory`
    if (updatedOrderData.status && updatedOrderData.updatedBy) {
      order.statusHistory.push({
        status: updatedOrderData.status,
        updatedBy: updatedOrderData.updatedBy,
        updatedAt: new Date(),
      });
    }

    // ‚úÖ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–∞–ª–µ –Ω–µ —Ç–æ—Ä–∫–∞—î–º–æ—Å—è `_id`)
    Object.assign(order, updatedOrderData);
    await order.save();

    console.log("‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –æ–Ω–æ–≤–ª–µ–Ω–æ!");
    res.status(200).json({ message: "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!", order });
  } catch (error) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ error: "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});

module.exports = router;
