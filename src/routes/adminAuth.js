const express = require("express");
const router = express.Router();
const sendEmail = require("../../emailService");
const User = require("../schemas/user");

router.post("/register", async (req, res) => {
  const { username, email, password, adminSecret } = req.body;

  // üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞
  if (!adminSecret || adminSecret !== process.env.ADMIN_SECRET_KEY) {
    return res.status(403).json({ message: "Invalid Admin Secret Key" });
  }

  try {
    // üõ°Ô∏è –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = bcrypt.hashSync(password, 10);

    // üìå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω–∞
    const newAdmin = new User({
      username,
      email,
      password: hashedPassword,
      role: "admin",
    });
    await newAdmin.save();

    // ‚úâÔ∏è –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è email-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await sendEmail(
      email,
      "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!",
      `–í—ñ—Ç–∞—î–º–æ, ${username}! –í–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.`
    );

    res
      .status(201)
      .json({ message: "Admin registered successfully! Email sent." });
  } catch (error) {
    res
      .status(500)
      .json({ error: "Registration failed", details: error.message });
  }
});

router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email, role: "admin" });
    if (!user || !bcrypt.compareSync(password, user.password)) {
      return res.status(403).json({ message: "Invalid credentials" });
    }

    // üé´ –ì–µ–Ω–µ—Ä—É—î–º–æ JWT-—Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { id: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "2h" }
    );

    // ‚úâÔ∏è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω
    await sendEmail(
      email,
      "–í—Ö—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
      `–í—ñ—Ç–∞—î–º–æ, ${user.username}! –í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ.`
    );

    // üîÄ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É
    res.json({
      message: "Login successful",
      token,
      redirect: "/api/admin/dashboard",
    });
  } catch (error) {
    res.status(500).json({ error: "Login failed", details: error.message });
  }
});
module.exports = router;
