const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const { authenticateAdmin } = require("../../middleware/authenticateAdmin");
const OfflineOrder = require("../../schemas/orders/offlineOrders");
const StockMovement = require("../../schemas/accounting/stockMovement");
const Invoice = require("../../schemas/accounting/InvoiceSchema");
const Product = require("../../schemas/product");
const FinanceOverview = require("../../schemas/finance/financeOverview");
const OfflineSale = require("../../schemas/sales/offlineSales");
const {
  generateUniversalInvoice,
} = require("../../services/generateUniversalInvoice");
const { calculateStock } = require("../../services/calculateStock");
// üîπ GET: –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –æ—Ñ–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.get("/", authenticateAdmin, async (req, res) => {
  try {
    const orders = await OfflineOrder.find().sort({ createdAt: -1 });
    res.status(200).json(orders);
  } catch (error) {
    console.error("üß® Error fetching offline orders:", error);
    res.status(500).json({ error: "Failed to fetch offline orders" });
  }
});

// üîπ GET: –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ ID
router.get("/:id", authenticateAdmin, async (req, res) => {
  try {
    const order = await OfflineOrder.findById(req.params.id);
    if (!order) return res.status(404).json({ error: "Order not found" });

    res.status(200).json(order);
  } catch (error) {
    console.error("üß® Error fetching order by ID:", error);
    res.status(500).json({ error: "Failed to fetch order" });
  }
});

// üîπ POST: –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –æ—Ñ–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.post("/", authenticateAdmin, async (req, res) => {
  try {
    const {
      products,
      paymentMethod,
      buyerType,
      buyerName,
      buyerAddress,
      buyerNIP,
      saleDate,
    } = req.body;

    const validMethods = ["BLIK", "bank_transfer"];
    if (!validMethods.includes(paymentMethod)) {
      return res.status(400).json({ error: "Invalid payment method" });
    }

    const enrichedProducts = [];
    let totalAmount = 0;

    for (const item of products) {
      // üîç –ó–Ω–∞–π—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–∫–ª–∞–¥—Å—å–∫–∏–π —Ä—É—Ö –ø–æ —Ç–æ–≤–∞—Ä—É
      const lastMovement = await StockMovement.findOne({
        productId: item.productId,
        type: { $in: ["sale", "purchase"] },
      }).sort({ date: -1 });

      if (
        !lastMovement ||
        !lastMovement.productIndex ||
        !lastMovement.productName
      ) {
        throw new Error(
          `‚ùå No stock movement found for product ${item.productId}`
        );
      }

      const stockLevel = await calculateStock(lastMovement.productIndex);
      if (stockLevel < item.quantity) {
        return res.status(400).json({
          error: `Insufficient stock for ${lastMovement.productName}`,
        });
      }

      const unitPrice =
        lastMovement.unitSalePrice ||
        lastMovement.price || // üí∏ ‚Üê —Ü–µ —Ç–≤—ñ–π 58
        productData?.lastRetailPrice ||
        lastMovement.unitPurchasePrice ||
        0;

      totalAmount += unitPrice * item.quantity;

      // üîß –¢—è–≥–Ω–µ–º–æ —Ç—ñ–ª—å–∫–∏ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ñ –¥–∞–Ω—ñ –∑ Product (—Ñ–æ—Ç–æ —Ç–æ—â–æ)
      const productVisual = await Product.findById(item.productId);

      enrichedProducts.push({
        productId: item.productId,
        index: lastMovement?.productIndex || item.index,
        name: lastMovement?.productName || item.name,
        photoUrl: productVisual?.photoUrl || "",
        quantity: item.quantity,
        price: unitPrice, // ‚úÖ –∑ —Ä—É—Ö—É
      });
    }

    const order = await OfflineOrder.create({
      products: enrichedProducts,
      totalPrice: totalAmount,
      paymentMethod,
      status: "pending", // üîπ –≤–∞–∂–ª–∏–≤–æ: –Ω–µ completed!
      buyerType,
      saleDate,
      ...(buyerType === "przedsiƒôbiorca" && {
        buyerName,
        buyerAddress,
        buyerNIP,
      }),
    });

    res.status(201).json({ message: "Offline order created", order });
  } catch (error) {
    console.error("üî• Error creating offline order:", error);
    res
      .status(500)
      .json({ error: error.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" });
  }
});

// üîπ PATCH: –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –æ—Ñ–ª–∞–π–Ω-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
router.patch("/:id", authenticateAdmin, async (req, res) => {
  try {
    const { status } = req.body;
    const validStatuses = ["pending", "completed", "cancelled"];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: "Invalid status value" });
    }

    const order = await OfflineOrder.findByIdAndUpdate(
      req.params.id,
      { status },
      { new: true }
    );

    if (!order) return res.status(404).json({ error: "Order not found" });

    res.status(200).json({ message: "Order status updated", order });
  } catch (error) {
    console.error("üß® Error updating order status:", error);
    res.status(500).json({ error: "Failed to update order" });
  }
});

module.exports = router;
