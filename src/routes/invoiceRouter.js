const express = require("express");
const router = express.Router();
const { authenticateUser } = require("../middleware/authenticateUser");
const OnlineOrder = require("../schemas/finance/onlineOrders");
const Invoice = require("../schemas/InvoiceSchema");
const generateInvoicePDF = require("../config/invoicePdfGenerator");
const uploadToDrive = require("../services/uploadToDrive");

// ‚úÖ –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–∫—Ç—É—Ä—É –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏
router.post("/generate/:orderId", authenticateUser, async (req, res) => {
  try {
    const {
      buyerType = "individual",
      buyerName,
      buyerAddress,
      buyerNIP,
    } = req.body;
    const order = await OnlineOrder.findById(req.params.orderId);

    if (!order || order.status !== "paid") {
      return res
        .status(400)
        .json({ error: "Invoice can be generated only after payment" });
    }

    const invoiceData = {
      userId: req.user.id,
      orderId: order._id,
      invoiceType: "online",
      totalAmount: order.totalAmount,
      paymentMethod: order.paymentMethod,
      buyerType,
    };

    // üéØ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∫–≤—ñ–∑–∏—Ç—ñ–≤ –ø–æ–∫—É–ø—Ü—è
    if (buyerType === "company") {
      invoiceData.buyerName = buyerName;
      invoiceData.buyerAddress = buyerAddress;
      invoiceData.buyerNIP = buyerNIP;
    } else if (buyerType === "individual") {
      invoiceData.buyerName = buyerName || order.buyerName;
      invoiceData.buyerAddress = buyerAddress || order.buyerAddress;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–≤–æ–π—Å (–±–µ–∑ invoiceNumber ‚Äî –∑–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
    const invoice = new Invoice(invoiceData);
    await invoice.validate(); // –≤—Ä—É—á–Ω—É, —â–æ–± –∑–ª–æ–≤–∏—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –¥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è

    // üßæ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF
    const pdfPath = await generateInvoicePDF(invoice, buyerType);
    invoice.filePath = pdfPath;

    // ‚òÅÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Google Drive
    const publicUrl = await uploadToDrive(
      pdfPath,
      `${invoice.invoiceNumber}.pdf`
    );
    invoice.fileUrl = publicUrl;

    await invoice.save();

    res.status(200).json({ message: "Invoice generated", invoice });
  } catch (error) {
    console.error("‚ùå Failed to generate invoice:", error.message);
    res.status(500).json({ error: "Failed to generate invoice" });
  }
});

// ‚úÖ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–∫—Ç—É—Ä—É –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º
router.get("/:orderId", authenticateUser, async (req, res) => {
  try {
    const invoice = await Invoice.findOne({ orderId: req.params.orderId });
    if (!invoice) return res.status(404).json({ error: "Invoice not found" });

    res.status(200).json(invoice);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch invoice" });
  }
});

// ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–∫—Ç—É—Ä—É (–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —à–ª—è—Ö—É –∞–±–æ –∑ Drive)
router.get("/download/:orderId", authenticateUser, async (req, res) => {
  try {
    const invoice = await Invoice.findOne({ orderId: req.params.orderId });

    if (!invoice) return res.status(404).json({ error: "Invoice not found" });

    // –Ø–∫—â–æ —î filePath ‚Üí –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –¥–∏—Å–∫–∞
    if (invoice.filePath) {
      return res.download(invoice.filePath);
    }

    // –Ü–Ω–∞–∫—à–µ –ø–µ—Ä–µ–∫–∏–Ω—É—Ç–∏ –Ω–∞ —Ö–º–∞—Ä–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if (invoice.fileUrl) {
      return res.redirect(invoice.fileUrl);
    }

    res.status(404).json({ error: "Invoice file not available" });
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch invoice file" });
  }
});

module.exports = router;
