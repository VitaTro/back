const express = require("express");
const User = require("../../schemas/userSchema");
const Product = require("../../schemas/product");
const { authenticateUser } = require("../../middleware/authenticateUser");
const { sendAdminMessage } = require("../../config/emailService");
const Recent = require("../../schemas/recent");
const router = express.Router();

// üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ
router.get("/profile/info", authenticateUser, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select(
      "username email firstName lastName phone"
    );
    if (!user) {
      return res
        .status(404)
        .json({ message: "U≈ºytkownik nie zosta≈Ç znaleziony" });
    }
    res.json(user);
  } catch (error) {
    console.error("Error fetching profile info:", error);
    res.status(500).json({ message: "B≈ÇƒÖd serwera" });
  }
});

// ‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ
router.put("/profile/info", authenticateUser, async (req, res) => {
  try {
    const { username, email, firstName, lastName, phone } = req.body;
    const updatedUser = await User.findByIdAndUpdate(
      req.user.id,
      { username, email, firstName, lastName, phone },
      { new: true, runValidators: true }
    ).select("username email firstName lastName phone");

    if (!updatedUser) {
      return res
        .status(404)
        .json({ message: "U≈ºytkownik nie zosta≈Ç znaleziony" });
    }

    res.json(updatedUser);
  } catch (error) {
    console.error("Error updating profile info:", error);
    res.status(500).json({ message: "B≈ÇƒÖd serwera" });
  }
});

// üè† –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É
router.get("/profile/address", authenticateUser, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("address");
    if (!user) {
      return res
        .status(404)
        .json({ message: "U≈ºytkownik nie zosta≈Ç znaleziony" });
    }
    res.json(user.address);
  } catch (error) {
    console.error("Error fetching address:", error);
    res.status(500).json({ message: "B≈ÇƒÖd serwera" });
  }
});

// ‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ –∞–¥—Ä–µ—Å—É
router.put("/profile/address", authenticateUser, async (req, res) => {
  try {
    const { address } = req.body;
    const updatedUser = await User.findByIdAndUpdate(
      req.user.id,
      { address },
      { new: true, runValidators: true }
    ).select("address");

    if (!updatedUser) {
      return res
        .status(404)
        .json({ message: "U≈ºytkownik nie zosta≈Ç znaleziony" });
    }

    res.json(updatedUser.address);
  } catch (error) {
    console.error("Error updating address:", error);
    res.status(500).json({ message: "B≈ÇƒÖd serwera" });
  }
});

// ‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
router.delete("/profile", authenticateUser, async (req, res) => {
  try {
    const deletedUser = await User.findByIdAndDelete(req.user.id);
    if (!deletedUser) {
      return res
        .status(404)
        .json({ message: "U≈ºytkownik nie zosta≈Ç znaleziony" });
    }
    res.json({ message: "Konto zosta≈Ço pomy≈õlnie usuniƒôte" });
  } catch (error) {
    console.error("Error deleting account:", error);
    res.status(500).json({ message: "B≈ÇƒÖd serwera" });
  }
});
router.post("/profile/email", authenticateUser, async (req, res) => {
  try {
    const { subject, message } = req.body;
    if (!subject || !message)
      return res
        .status(400)
        .json({ error: "Nale≈ºy podaƒá temat i tre≈õƒá wiadomo≈õci" });

    await sendAdminMessage(subject, message);

    res
      .status(201)
      .json({ message: "List do administratora zosta≈Ç pomy≈õlnie wys≈Çany!" });
  } catch (error) {
    res
      .status(500)
      .json({ error: "Nie uda≈Ço siƒô wys≈Çaƒá wiadomo≈õci do administratora." });
  }
});
router.get("/recent", authenticateUser, async (req, res) => {
  try {
    const recentViews = await Recent.find({ userId: req.user.id })
      .populate("productId", "name photoUrl price category subcategory")
      .sort({ viewedAt: -1 })
      .limit(20); // –ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤

    res.status(200).json(recentViews);
  } catch (error) {
    res
      .status(500)
      .json({ error: "Nie uda≈Ço siƒô pobraƒá historii przeglƒÖdania" });
  }
});

// üìå –í—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ü—ñ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ)
router.get("/products", authenticateUser, async (req, res) => {
  try {
    console.log("üõç Fetching products for user:", req.user);

    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Unauthorized: No user ID found." });
    }

    const products = await Product.find();
    res.status(200).json(products);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch products" });
  }
});

module.exports = router;
