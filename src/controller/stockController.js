const StockMovement = require("../schemas/accounting/stockMovement");
const Product = require("../schemas/product");
const { calculateStock } = require("../services/calculateStock");

async function handleSaleStockByIndex(saleDoc, source) {
  try {
    for (const item of saleDoc.products) {
      if (!item.index || !item.name) {
        console.warn(`‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π index –∞–±–æ name —É –ø—Ä–æ–¥—É–∫—Ç—ñ:`, item);
        continue;
      }

      const product = await Product.findOne({
        index: item.index,
        name: item.name,
      });

      if (!product) {
        console.warn(`üîç –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${item.name} (${item.index})`);
        continue;
      }

      if (product.quantity < item.quantity) {
        console.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–ª–∏—à–∫—É –¥–ª—è ${item.name}`);
        continue;
      }

      const movement = new StockMovement({
        productIndex: item.index,
        productName: item.name,
        type: "sale",
        quantity: item.quantity,
        price: item.price, // üìå –û–±–æ–≤ º—è–∑–∫–æ–≤–µ –ø–æ–ª–µ –∑–≥—ñ–¥–Ω–æ —Å—Ö–µ–º–∏
        unitSalePrice: item.price, // ‚úÖ required –¥–ª—è —Ç–∏–ø—É 'sale'
        date: saleDoc.saleDate || new Date(),
        relatedSaleId: saleDoc._id,
        saleSource: source,
        note: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—è –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂—É",
      });

      await movement.save();

      // üßÆ –û–Ω–æ–≤–ª—é—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É —Ç–æ–≤–∞—Ä—ñ
      product.quantity -= item.quantity;
      product.currentStock = product.quantity;
      product.inStock = product.quantity > 0;

      if (item.price) product.lastRetailPrice = item.price;

      await product.save();

      console.log(`‚úÖ –†—É—Ö –ø—Ä–æ–¥–∞–∂—É —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è ${item.name} (${item.index})`);
    }
  } catch (err) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–Ω—ñ –∑—ñ —Å–∫–ª–∞–¥—É:", err);
  }
}
async function autoUpdateStockAfterSale(saleDoc) {
  try {
    for (const item of saleDoc.products) {
      const product = await Product.findById(item.productId);
      if (!product || product.quantity < item.quantity) {
        console.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ ${item.name} –Ω–∞ —Å–∫–ª–∞–¥—ñ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        continue;
      }
      const movement = new StockMovement({
        productIndex: product.index,
        productName: product.name,
        quantity: item.quantity,
        type: "sale",
        unitSalePrice: item.price,
        price: item.price,
        relatedSaleId: saleDoc._id,
        saleSource: "OfflineSale",
        note: "–ê–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–Ω—è –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –ø—Ä–æ–¥–∞–∂—É",
        date: saleDoc.saleDate || new Date(),
      });

      await movement.save();
      product.quantity -= item.quantity;
      product.currentStock = product.quantity;
      product.inStock = product.quantity > 0;
      product.lastRetailPrice = item.price;

      await product.save();
      console.log(`‚úÖ –°–ø–∏—Å–∞–Ω–æ: ${product.name}, -${item.quantity}`);
    }
  } catch (err) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥—É:", err);
  }
}

module.exports = { handleSaleStockByIndex, autoUpdateStockAfterSale };
