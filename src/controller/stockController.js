const StockMovement = require("../schemas/accounting/stockMovement");
const Product = require("../schemas/product");

async function handleSaleStockByIndex(saleDoc, source) {
  try {
    for (const item of saleDoc.products) {
      const product = await Product.findOne({
        index: item.index,
        name: item.name,
      });
      if (!product) {
        console.warn(`üîç –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${item.name} (${item.index})`);
        continue;
      }

      // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (—á–µ—Ä–µ–∑ stock movements)
      const currentStock = await calculateStock(product.index);
      if (currentStock < item.quantity) {
        console.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –Ω–∞ —Å–∫–ª–∞–¥—ñ –¥–ª—è ${product.name}`);
        continue;
      }

      // üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—É—Ö—É
      await StockMovement.create({
        productName: product.name,
        productIndex: product.index,
        type: "sale",
        quantity: item.quantity,
        unitSalePrice: item.price,
        date: saleDoc.saleDate,
        relatedSaleId: saleDoc._id,
        saleSource: source,
        note: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—è –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂—É",
      });

      // ‚ùå –ù–µ —á—ñ–ø–∞—î–º–æ product.quantity ‚Äî –≤–æ–Ω–∞ –æ–±—á–∏—Å–ª—é—î—Ç—å—Å—è –ø–æ—Ç—ñ–º!
    }
  } catch (err) {
    console.error("üî• –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–Ω—ñ –∑—ñ —Å–∫–ª–∞–¥—É:", err);
  }
}
module.exports = { handleSaleStockByIndex };
